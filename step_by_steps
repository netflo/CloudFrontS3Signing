
1. create a public bucket retrict access via OAI (Origin Access Identity)
2. create a distrubution with the OAI and ensure the dist is used self-signed cert
3. go to account security credentials (not IAM credentials but account level creds e.g. therefore need root account !!!) and create a new CloudFront access
4. transcode the private key to a string by changing the '\n' into \n.    Use:  tr '(chariage return)' '\n'    and store in variable as per code below
5. get the sdk   npm install aws-sdk
6. use node to run and sign URLs


CF_ACCESS_KEY_ID=`cat file_with_access_key` 
CF_PRIVATE_KEY=`cat cloud-front-private-rsa-key.pem | tr '\r\n' '\\n' `

in node.js:

// load the AWS SDK
const AWS = require('aws-sdk')

// load CloudFront key pair from environment variables
// Important: when storing your CloudFront private key as an environment variable string, 
// you'll need to replace all line breaks with \n, like this:
// CF_PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\nMIIE...1Ar\nwLW...2eL\nFOu...k2E\n-----END RSA PRIVATE KEY-----"
const cloudfrontAccessKeyId = process.env.CF_ACCESS_KEY_ID
const cloudFrontPrivateKey = process.env.CF_PRIVATE_KEY
const signer = new AWS.CloudFront.Signer(cloudfrontAccessKeyId, cloudFrontPrivateKey)

// 1 days as milliseconds to use for link expiration
const life_time = 1*24*60*60*1000

// sign a CloudFront URL 

const signedUrl = signer.getSignedUrl({
  url: 'https://blah.cloudfront.net/file.ext',
  expires: Math.floor((Date.now() + life_time)/1000), 
})

